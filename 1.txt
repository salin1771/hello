------------------------------------------------------------------------
1 FILE MANAGEMENT SYSTEM CALLS
-------------------------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>

int main(int argc,char**argv){
    int fd1,fd2;
    char buff[]="";
    fd1=open("C:/Users/salin/Desktop/file1.txt",O_RDONLY);
    fd2=open("C:/Users/salin/Desktop/file2.txt",O_WRONLY);
    if(fd1==-1){
        printf("ERROR!");
    }
    while(read(fd1,buff,sizeof(buff)))
    {
        write(fd2,buff,sizeof(buff));
    }
    close(fd1);
    close(fd2);
    return(EXIT_SUCCESS);
}
-------------------------------------------------------------------------
2 PROCESS MANAGEMENT SYSTEM CALLS 
-------------------------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

void perform_calculation(int a, int b, char operator) {
  int result;
  switch (operator) {
    case '+':
      result = a + b;
      break;
    case '-':
      result = a - b;
      break;
    case '*':
      result = a * b;
      break;
    case '/':
      if (b == 0) {
        printf("Error: Division by zero\n");
        exit(1);
      }
      result = a / b;
      break;
    default:
      printf("Invalid operator\n");
      exit(1);
  }
  printf("Child Process ID: %d, Parent Process ID: %d, Result: %d %c %d = %d\n",
         getpid(), getppid(), a, operator, b, result);
}

int main() {
  int num1 = 10, num2 = 5;
  char operators[] = {'+', '-', '*', '/'};

  for (int i = 0; i < 4; i++) {
    pid_t pid = fork();

    if (pid < 0) {
      perror("fork failed");
      exit(1);
    } else if (pid == 0) { // child process
      perform_calculation(num1, num2, operators[i]);
      exit(0);
    } else { // parent process
      printf("Parent Process ID: %d created child process: %d\n", getpid(), pid);
    }
  }

  // parent process waits for all child processes to finish
  for (int i = 0; i < 4; i++) {
    wait(NULL);
  }

  return 0;
}

-------------------------------------------------------------------------
3A Hello world 3 different threads
-------------------------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

// Thread function to display "Hello World"
void* displayMessage(void* threadid) {
   long tid;
   tid = (long)threadid;
   printf("Hello World from Thread %ld\n", tid);
   pthread_exit(NULL);
}

int main () {
   pthread_t threads[3];
   int rc;
   long t;
   for(t=0; t<3; t++){
      printf("In main: creating thread %ld\n", t);
      rc = pthread_create(&threads[t], NULL, displayMessage, (void *)t);
      if (rc){
         printf("ERROR; return code from pthread_create() is %d\n", rc);
         exit(-1);
      }
   }
   // Wait for all threads to complete
   for (t=0; t<3; t++) {
       pthread_join(threads[t], NULL);
   }
   return 0;
}

--------------------------------------------------------------------------
3B 2 threads for max marks 
--------------------------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <stdint.h> 

// Structure for student data
typedef struct {
   int marks[5];
} Student;

// Thread function to add marks
void* addMarks(void* studentData) {
   Student* student = (Student*)studentData;
   int sum = 0;
   for(int i = 0; i < 5; i++) {
      sum += student->marks[i];
   }
   // Return the sum of marks
   return (void*)(intptr_t)sum;
}

int main () {
   pthread_t threads[2];
   int rc;
   long t;
   int totalMarks[2] = {0};

   // Student data
   Student students[2] = {
      {{8, 7, 9, 6, 10}}, // Marks for student 1
      {{9, 8, 7, 9, 9}}   // Marks for student 2
   };

   // Create threads to add marks
   for(t=0; t<2; t++){
      rc = pthread_create(&threads[t], NULL, addMarks, (void *)&students[t]);
      if (rc){
         printf("ERROR; return code from pthread_create() is %d\n", rc);
         exit(-1);
      }
   }

   // Wait for threads to finish and collect results
   for (t=0; t<2; t++) {
       void* status;
       pthread_join(threads[t], &status);
       totalMarks[t] = (int)(intptr_t)status;
   }

   // Decide who scored more marks and display
   if (totalMarks[0] > totalMarks[1]) {
       printf("Student 1 scored the highest with %d marks.\n", totalMarks[0]);
   } else if (totalMarks[1] > totalMarks[0]) {
       printf("Student 2 scored the highest with %d marks.\n", totalMarks[1]);
   } else {
       printf("Both students scored equally with %d marks.\n", totalMarks[0]);
   }

   return 0;
}

--------------------------------------------------------------------------
4A priority scheduling 
--------------------------------------------------------------------------
#include <stdlib.h>  
#include <stdio.h>
int main(int argc, char** argv) {
int i,j,N,TAT[10],WT[10],pos,temp;
int Sum_wt=0,Sum_tat=0,AT[10],BT[10],PR[10];
printf("Enter Total Process:\t ");
scanf("%d",&N);
for(i=0;i<N;i++)
{
    printf("Enter Arrival Time for Process %d :",i+1);
scanf("%d",&AT[i]);
printf("Enter Burst Time for Process %d :",i+1);
scanf("%d",&BT[i]);
printf("Enter Priority of Process %d :",i+1);
scanf("%d",&PR[i]);
}
//Sort the processes according to priority
for(i=0;i<N;i++)
{
    pos=i;
for(j=i+1;j<N;j++)
{
    if(PR[j]<PR[pos])
{
    pos=j;

}

}

temp=PR[i];

PR[i]=PR[pos];

PR[pos]=temp;

temp=BT[i];

BT[i]=BT[pos];

BT[pos]=temp;

}

//To find turnaround time and waiting time

WT[0]=0;

printf("Process\t AT\t BT \t PR\t TAT\tWT\n");

for(i=0;i<N;i++)

{

WT[i]=0;

TAT[i]=0;

for(j=0;j<i;j++)

{

WT[i]=WT[i]+BT[j];

}

TAT[i]=WT[i]+BT[i];

Sum_wt=Sum_wt+WT[i];



Sum_tat=Sum_tat+TAT[i];

printf("%d\t%d\t%d\t%d\t%d\t%d\n",i,AT[i],BT[i],PR[i],TAT[i],WT[i]);

}

	printf("\nAverage Waiting Time= %f\n",(Sum_wt*1.0)/N);

	printf("Avg Turnaround Time = %f\n\n",(Sum_tat*1.0)/N);

	return (EXIT_SUCCESS);

	}
-----------------------------------------------------------------------------
/tmp/Pyrqsj54a6.o
Enter Total Process:	 5
Enter Arrival Time for Process 1 :0
Enter Burst Time for Process 1 :11
Enter Priority of Process 1 :2
Enter Arrival Time for Process 2 :5
Enter Burst Time for Process 2 :28
Enter Priority of Process 2 :0
Enter Arrival Time for Process 3 :12
Enter Burst Time for Process 3 :2
Enter Priority of Process 3 :3
Enter Arrival Time for Process 4 :2
Enter Burst Time for Process 4 :10
Enter Priority of Process 4 :1
Enter Arrival Time for Process 5 :9
Enter Burst Time for Process 5 :16
Enter Priority of Process 5 :4
Process	 AT	 BT 	 PR	 TAT	WT
0	0	28	0	28	0
1	5	10	1	38	28
2	12	11	2	49	38
3	2	2	3	51	49
4	9	16	4	67	51

Average Waiting Time= 33.200000
Avg Turnaround Time = 46.600000



=== Code Execution Successful ===
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
4B ROUND ROBIN 
-------------------------------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
/*
*
*/
int main(int argc, char** argv) {
int i,j,N,time,remain,count=0,TQ,TAT,WT;
int Sum_wt=0,Sum_tat=0,AT[10],BT[10],Temp[10];
printf("Enter Total Process:\t ");
scanf("%d",&N);
remain=N;
for(i=0;i<N;i++)
{
printf("Enter Arrival Time for Process %d :",i+1);
scanf("%d",&AT[i]);
printf("Enter Burst Time for Process %d :",i+1);
scanf("%d",&BT[i]);
Temp[i]=BT[i];
}
printf("Enter Time Quantum:\t");
scanf("%d",&TQ);
printf("\n\nProcess\t|AT | BT |Turnaround Time|Waiting Time\n\n");
for(time=0,i=0;remain!=0;)
{
if(Temp[i]<=TQ && Temp[i]>0)
{
time=time+Temp[i];
Temp[i]=0;
count=1;
}
else if(Temp[i]>0)
{
Temp[i]=Temp[i]-TQ;
time=time+TQ;
}
if(Temp[i]==0 && count==1)
{
remain--;
TAT=time-AT[i];

WT=TAT-BT[i];
printf("P[%d]\t|%d\t%d\t\t%d\t|\t%d\n",i+1,AT[i],BT[i],TAT,WT);
Sum_wt=Sum_wt+WT;
Sum_tat=Sum_tat+TAT;
count=0;
}
if(i==N-1)
i=0;
else if(AT[i+1]<=time)
i++;
else
i=0;
}
printf("\nAverage Waiting Time= %f\n",(Sum_wt*1.0)/N);
printf("Avg Turnaround Time = %f\n\n",(Sum_tat*1.0)/N);
return (EXIT_SUCCESS);
}
---------------------------------------------------------------------------------

Enter Total Process:	 5
Enter Arrival Time for Process 1 :0
Enter Burst Time for Process 1 :8
Enter Arrival Time for Process 2 :5
Enter Burst Time for Process 2 :2
Enter Arrival Time for Process 3 :1
Enter Burst Time for Process 3 :7
Enter Arrival Time for Process 4 :6
Enter Burst Time for Process 4 :3
Enter Arrival Time for Process 5 :8
Enter Burst Time for Process 5 :5
Enter Time Quantum:	3


Process	|AT | BT |Turnaround Time|Waiting Time

P[2]	|5	2		3	|	1
P[4]	|6	3		8	|	5
P[1]	|0	8		19	|	11
P[5]	|8	5		16	|	11
P[3]	|1	7		24	|	17

Average Waiting Time= 9.000000
Avg Turnaround Time = 14.000000



=== Code Execution Successful ===
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
5 DINING PHILOSOPHER PROBLEM 
--------------------------------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define N 5
#define THINKING 2
#define HUNGRY 1
#define EATING 0
#define LEFT (phnum+4)%N
#define RIGHT (phnum+1)%N

int state[N];
int phil[N]={0,1,2,3,4};
sem_t mutex;
sem_t s[N];

void test(int phnum)
{
    if(state[phnum] == HUNGRY && state[LEFT] != EATING &&
    state[RIGHT] != EATING)
    {
        state[phnum] = EATING;
        printf("Philosopher %d takes fork %d and %d\n",phnum+1,LEFT +1,phnum +1);
        printf("Philosopher %d is eating\n",phnum+1);
        sem_post(&s[phnum]);
    }
}

void take_forks(int phnum){
    sem_wait(&mutex);
    state[phnum] = HUNGRY;
    printf("Philosopher %d is hungry\n",phnum+1);
    usleep(rand()%100000);
    test(phnum);
    sem_post(&mutex);
    sem_wait(&s[phnum]);
}

void put_forks(int phnum){
    sem_wait(&mutex);
    state[phnum] = THINKING;
    printf("Philosopher %d putting fork %d and %d down\n", phnum+1,LEFT+1,phnum+1);
    printf("Philosopher %d is thinking\n", phnum+1);
    test(LEFT);
    test(RIGHT);
    sem_post(&mutex);
}

void *philosopher(void *num)
{
    int *cycles = (int *)num;
    int i;
    for (i=0;i<*cycles;i+1)
    {
        take_forks(*phil);
        put_forks(*phil);
    }
    return  NULL;
}

int main(int argc,char** argv){
    int i, cycles = 5;
    pthread_t tid[N];
    sem_init(&mutex, 0, 1);
    for(int i = 0; i < N; i++)
        sem_init(&s[i], 0, 0);
    for(int i = 0; i < N; i++)
    {
        pthread_create(&tid[i], NULL, philosopher, &cycles);
        printf("Philosopher %d is thinking\n", i+1);
    }
    //Join threads
    for(int i = 0; i < N; i++){
        pthread_join(tid[i], NULL);
    }
    return EXIT_SUCCESS;
}
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
6 Readers Writers 
-----------------------------------------------------------------------------------
#include <stdio.h>
#include <stdlib.h> 
#include <pthread.h> 
#include <semaphore.h> 

sem_t wrt;
pthread_mutex_t mutex;
int cnt = 1;
int readcount = 0;

void *writer(void *wno)
{
    sem_wait(&wrt);
    cnt = cnt*4;
    printf("Writer %d modified cnt to %d\n", (*((int *)wno)), cnt); 
    sem_post(&wrt);
}
void reader (void *rno)
{
    pthread_mutex_lock(&mutex);
    readcount++;
    if(readcount == 1) {
        sem_wait(&wrt);
}

pthread_mutex_unlock(&mutex);
printf("Reader %d: read cnt as %d\n",*((int *)rno), cnt);
pthread_mutex_lock(&mutex);
readcount--;
if (readcount== 0) {
    sem_post(&wrt);
}

pthread_mutex_unlock(&mutex);

printf("Reader %d: read cnt as %d\n",*((int *)rno), cnt); 
pthread_mutex_lock (&mutex); 
readcount--;
if (readcount== 0) {
    sem_post(&wrt);
}

pthread_mutex_unlock (&mutex);
}


int main(int argc, char** argv) { 
    pthread_t read [10],write[5]; 
        pthread_mutex_init(&mutex, NULL); 
        sem_init(&wrt,0,1);
        int i;
        int a[10]= {1,2,3,4,5,6,7,8,9,10};
        for(i = 0; i < 10; i++) {
            pthread_create(&read[i], NULL, (void *)reader, (void *)&a[i]);
        }

        for(i=0; i < 5; i++) {
            pthread_create(&write[i], NULL, (void *)writer, (void *)&a[i]);
        }

        for(i = 0; i < 10; i++) {
            pthread_join(read[i], NULL);
        }

        for(i = 0; i < 5; i++) {
            pthread_join(write[i], NULL);
        }

        pthread_mutex_destroy(&mutex);
        sem_destroy(&wrt);
        return (EXIT_SUCCESS);
}
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
